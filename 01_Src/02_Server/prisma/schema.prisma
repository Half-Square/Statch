// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id              String          @default(nanoid(8)) @id
  name            String
  password        String
  email           String          @unique
  validate        Boolean         @default(false)
  comments        Comment[]
  projects        Project[]
  tasks           Task[]
  tickets         Ticket[]
  assignment      Assignment[]

  @@fulltext([id])
  @@fulltext([name])
  @@fulltext([email])
  @@fulltext([id, name, email])
}

model Project {
  id              String          @default(nanoid(8)) @id
  name            String
  status          String          @default("new")
  created         DateTime        @default(now())
  description     String          @db.LongText
  tasks           Task[]
  comments        Comment[]
  owner           User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String
  assignments     Assignment[]

  actualVersion   String?
  versionList     Version[]

  @@fulltext([id])
  @@fulltext([name])
  @@fulltext([id, name])
}

model Task {
  id              String          @default(nanoid(8)) @id
  created         DateTime        @default(now())
  name            String
  status          String          @default("new")
  level           String          @default("normal")
  description     String
  project         Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String
  comments        Comment[]
  tickets         Ticket[]
  owner           User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String
  assignments     Assignment[]
  targetVersion   Version?        @relation(fields: [targetVersionId], references: [id])
  targetVersionId String?

  @@fulltext([id])
  @@fulltext([name])
  @@fulltext([id, name])
}

model Ticket {
  id              String          @default(nanoid(8)) @id
  name            String
  status          String          @default("new")
  level           String          @default("normal")
  description     String
  task            Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId          String
  comments        Comment[]
  owner           User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String
  assignments     Assignment[]
  targetVersion   Version?        @relation(fields: [targetVersionId], references: [id])
  targetVersionId String?

  @@fulltext([id])
  @@fulltext([name])
  @@fulltext([id, name])
}

model Comment {
  id              String          @default(nanoid(8)) @id
  created         DateTime        @default(now())
  content         String          @db.LongText
  project         Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String?
  task            Task?           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId          String?
  ticket          Ticket?         @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId        String?
  author          User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String
}

model Assignment {
  id              String          @default(nanoid(8)) @id
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  project         Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String?
  task            Task?           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId          String?
  ticket          Ticket?         @relation(fields: [ticketId], references: [id])
  ticketId        String?
}

model Version {
  id              String          @default(nanoid(8)) @id
  name            String

  project         Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String

  tasks          Task[]
  tickets        Ticket[]
}