// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider        = "sqlite"
  url             = env("DATABASE_URL")
}

model User {
  id              String          @default(nanoid(8)) @id
  name            String
  password        String
  email           String          @unique
  validate        Boolean         @default(false)
  isAdmin         Boolean         @default(false)
  picture         String          @default("")
  comments        Comment[]
  projects        Project[]
  tasks           Task[]
  tickets         Ticket[]
  assignment      Assignment[]
  role            Role?            @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId          String?
}

model Project {
  id              String          @default(nanoid(8)) @id
  name            String
  status          String          @default("new")
  level           String          @default("normal")
  created         DateTime        @default(now())
  description     String          
  owner           User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String
  actualVersion   String?

  tasks           Task[]
  comments        Comment[]
  assignments     Assignment[]

  versionList     Version[]
  labels          LabelsOnProject[]
}

model Task {
  id              String          @default(nanoid(8)) @id
  created         DateTime        @default(now())
  name            String
  status          String          @default("new")
  level           String          @default("normal")
  description     String
  project         Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String
  comments        Comment[]
  tickets         Ticket[]
  owner           User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String
  assignments     Assignment[]
  targetVersion   Version?        @relation(fields: [targetVersionId], references: [id], onDelete: SetNull)
  targetVersionId String?

  labels          LabelsOnTask[]
}

model Ticket {
  id              String          @default(nanoid(8)) @id
  created         DateTime        @default(now())
  name            String
  status          String          @default("new")
  level           String          @default("normal")
  description     String
  task            Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId          String
  comments        Comment[]
  owner           User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String
  assignments     Assignment[]
  targetVersion   Version?        @relation(fields: [targetVersionId], references: [id], onDelete: SetNull)
  targetVersionId String?

  labels          LabelsOnTicket[]
}

model Comment {
  id              String          @default(nanoid(8)) @id
  created         DateTime        @default(now())
  content         String          
  project         Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String?
  task            Task?           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId          String?
  ticket          Ticket?         @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId        String?
  author          User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String
}

model Assignment {
  id              String          @default(nanoid(8)) @id
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  project         Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String?
  task            Task?           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId          String?
  ticket          Ticket?         @relation(fields: [ticketId], references: [id])
  ticketId        String?
}

model Version {
  id              String          @default(nanoid(8)) @id
  name            String

  project         Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String

  tasks          Task[]
  tickets        Ticket[]
}

model Label {
  id              String          @default(nanoid(8)) @id
  name            String
  description     String
  
  projects        LabelsOnProject[]         
  tasks           LabelsOnTask[]           
  tickets         LabelsOnTicket[]         

  color           String
}

model Activity {
  id              String          @default(nanoid(8)) @id
  created         DateTime        @default(now())
  actor           String
  action          String
  target          String
  toPrint         String          @default("")
}

model LabelsOnProject {
  project         Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String
  label           Label           @relation(fields: [labelId], references: [id], onDelete: Cascade)
  labelId         String

  @@id([projectId, labelId])
}

model LabelsOnTask {
  task         Task               @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId       String
  label        Label              @relation(fields: [labelId], references: [id], onDelete: Cascade)
  labelId      String

  @@id([taskId, labelId])
}

model LabelsOnTicket {
  ticket         Ticket           @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId       String
  label          Label            @relation(fields: [labelId], references: [id], onDelete: Cascade)
  labelId        String

  @@id([ticketId, labelId])
}

model File {
  id             String           @default(nanoid(8)) @id
  name           String
  path           String
  date           DateTime         @default(now())
}

model System {
  id            String            @default(nanoid(8)) @id
  smtp          Smtp?
}

model Smtp {
  system        System            @relation(fields: [systemId], references: [id], onDelete: Cascade)
  systemId      String            @unique
  host          String
  port          Int
  user          String
  password      String
}

model Role {
  id            String            @default(nanoid(8)) @id
  name          String            @unique
  permissions   String
  users         User[]
}
